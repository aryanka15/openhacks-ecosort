import Head from 'next/head'
import {useEffect} from "react";
import styles from "@/styles/Home.module.css"
import * as tf from '@tensorflow/tfjs';
import {AiOutlineLoading3Quarters} from "react-icons/ai"
import {LayersModel, Tensor, Tensor4D} from "@tensorflow/tfjs";
export default function Home() {

  const interpret_key = ["Trash", "Compost", "Recycle"]
  async function loadModel() {
    let model = await tf.loadLayersModel("https://ecosort.vercel.app/ai_model/model.json");
    return model;
  }
  async function classifyImage(image_tf: Tensor4D) {
    let model = await loadModel();
    console.log("Started predicting");
    let predictions: Tensor = model.predict(image_tf) as Tensor;
    // Interpret the predictions of tensorflowjs
    console.log(predictions.dataSync());
    console.log(predictions);
    // Index of largest value in predictions.dataSync()
    let max_index = predictions.argMax(1).dataSync()[0];
    console.log(max_index);
    // Use the index to get the key from the interpret_key array
    let prediction = interpret_key[max_index];
    console.log("Finished predicting");
    return prediction;
  }

  useEffect(() => {
    const imageInput: any = document.getElementById("imageFile")!;
    const displayDiv = document.getElementById("displayDiv")!;
    const displayImage: any = document.getElementById("displayImage")!;
    const result = document.getElementById("result")!;
    const backButton = document.getElementById("backButton")!;
    const anotherButton = document.getElementById("anotherButton")!;
    backButton.addEventListener("click", () => {
      displayDiv.style.display = "flex";
      displayImage.src = "";
      result.style.display = "none";
      imageInput.value = "";
      anotherButton.style.display = "none";
      document.getElementById("secondScreen")!.style.display = "none";
    })
    anotherButton.addEventListener("click", () => {
      displayDiv.style.display = "flex";
      displayImage.src = "";
      result.style.display = "none";
      imageInput.value = "";
      anotherButton.style.display = "none";
      document.getElementById("secondScreen")!.style.display = "none";
    })
    imageInput.addEventListener("change", (e: any) => {
      if (e == null || e.target == null || e.target.files == null) {
        return;
      }
      document.getElementById("secondScreen")!.style.display = "flex";
      document.getElementById("loading")!.style.display = "block";
      console.log("Image file changed");
      displayDiv.style.display = "none";
      const file = e.target.files[0];

      let reader = new FileReader();

      reader.onload = async function (event) {
        if (event.target == null) {
          return
        }
        console.log(event.target.result);
        const imageElement = new Image();
        imageElement.src = String(event.target.result);
        imageElement.onload = async function() {
          displayImage.setAttribute("src", imageElement.src);
          // displayImage.setAttribute("height", "500px");
          // displayImage.setAttribute("width", "500px");
          let image_tf = tf.browser.fromPixels(imageElement);
          const smallImg = tf.image.resizeBilinear(image_tf, [180, 180]);
          const resized = tf.cast(smallImg, "float32");
          const t4d = tf.tensor4d(resized.dataSync(), [1, 180, 180, 3]);
          let prediction = await classifyImage(t4d);
          result.innerHTML = prediction;
          result.style.display = "block";
          document.getElementById("loading")!.style.display = "none";
          anotherButton.style.display = "block"
        }

      };
      reader.readAsDataURL(file);
    });

  })
  return (
    <>
      <Head>
        <title>Eco Sort</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div
            className="flex flex-col md:space-x-20 md:px-10 md:flex-row justify-center items-center bg-sky-300 md:h-screen"
            id="displayDiv"
        >
          <div
              className="flex flex-col p-20 space-y-5 md:bg-sky-500 md:bg-opacity-70 md:border-4 md:border-sky-600 md:rounded-2xl justify-center"
          >
            <h1 className="text-4xl md:text-6xl font-bold">Eco Sort</h1>
            <p className="text-2xl font-semibold">A tool to help you throw away your trash responsibly.</p>
          </div>

          <div className="flex flex-col h-full items-center justify-center">
            <ol className="list-inside text-2xl mb-10 space-y-20 font-semibold">
              <li className={styles.listItem}>1. Find some trash</li>
              <label htmlFor="imageFile" className={`${styles.listItem} ${styles.listButton}`}>
                <li className="flex flex-col items-start">
                  <div>2. Upload a picture</div>
                  <div className="text-lg">(Click Me!)</div>
                </li>
              </label>
              <input className="hidden" type="file" id="imageFile" accept="image/*"/>
              <li className={styles.listItem}>3. Get a result</li>
            </ol>
          </div>
        </div>
        <div id={"secondScreen"} className="hidden flex-col justify-start pt-10 space-y-16 items-center bg-sky-300 h-screen">
          <div className={"flex w-screen flex-row justify-start pl-20"}>
            <button id={"backButton"}>
              <div className={"flex flex-row items-center text-2xl px-5 py-2 border-2 rounded-md bg-white hover:bg-sky-500 transition border-sky-900"}>
                Back
              </div>
            </button>
          </div>
          <img className={"rounded-xl border-white border-4 aspect-square h-80 w-80"} src="" id="displayImage" alt=""/>
          <div className={"flex flex-col items-center text-center space-y-10"}>
            <h1 id={"result"} className={"text-5xl hidden"}></h1>
            <button id={"anotherButton"} className={"hidden"}>
              <div className = "flex-row text-center items-center text-3xl px-6 py-3 border-4 bg-green-600 rounded-lg hover:bg-white hover:border-black transition border-sky-900">
                  Take Another Picture!
              </div>
            </button>
            <AiOutlineLoading3Quarters id={"loading"} className={"animate-spin text-6xl"}></AiOutlineLoading3Quarters>
          </div>
        </div>
      </main>
    </>
  )
}
